/***i
 * This example expects the serial port has a loopback on it.
 *
 * Alternatively, you could use an Arduino:
 *
 * <pre>
 *  void setup() {
 *    Serial.begin(<insert your baudrate here>);
 *  }
 *
 *  void loop() {
 *    if (Serial.available()) {
 *      Serial.write(Serial.read());
 *    }
 *  }
 * </pre>
 */
#include <iostream>
#include <ros/ros.h>
#include <serial/serial.h>
#include <std_msgs/String.h>
#include <std_msgs/Empty.h>
#include <std_msgs/UInt8MultiArray.h>
#include <string>
#include <stdlib.h>
#include <cstdlib>
#include <cstring>
#include <sstream>


serial::Serial ser;


int main (int argc, char** argv){
    //std_msgs::UInt8MultiArray msg;
	//msg.data.resize(14);
	unsigned char alive=0x00;
	
	unsigned char gear = 0x00;

	unsigned char speed_0 = 0x00;
	unsigned char speed_1 = 0x10;

	unsigned char steer_0 = 0x00;
	unsigned char steer_1 = 0x00;
	unsigned int steer_total = 0;
	
	unsigned char str[14] = {0x53,0x54,0x58,0x01,0x00,0x00,speed_0, speed_1 ,steer_0,steer_1,0x00,alive,0x0D,0x0A};
	
    ros::init(argc, argv, "serial_example_node");
    ros::NodeHandle nh;

    //ros::Subscriber write_sub = nh.subscribe("write", 1000, write_callback);
    ros::Publisher read_pub = nh.advertise<std_msgs::String>("serial_data", 1000);

	try
    {
        ser.setPort("/dev/ttyUSB0");
        ser.setBaudrate(115200);
        serial::Timeout to = serial::Timeout::simpleTimeout(1000);
        ser.setTimeout(to);
        ser.open();
    }
    catch (serial::IOException& e)
    {
        ROS_ERROR_STREAM("Unable to open port ");
        return -1;
    }

    if(ser.isOpen()){
        ROS_INFO_STREAM("Serial Port initialized");
    }else{
        return -1;
    }

    ros::Rate loop_rate(5);
	
	//std::string str;

	while(ros::ok()){

        ros::spinOnce();
		size_t num_write = 14;
		
		//size_t num_rev = 18;
		//uint8_t receive[18];	

		steer_0 = steer_total >> 8;
		steer_1 = steer_total & 0xff;

		//write packet
		str[5] = gear;

		str[6] = speed_0;
		str[7] = speed_1;

		str[8] = steer_0;
		str[9] = steer_1;

		str[11] = alive;

		//send packet
		ser.write(str,num_write);

		//count alive
		if(alive!=0xff)
			alive++;
		else
			alive=0x00;

		if(steer_total >= 2000){
			steer_total = 0;
		}
		else{
			steer_total += 50;
		}

        if(ser.available()){
            ROS_INFO_STREAM("Reading from serial port");
            std_msgs::String result;
			result.data = ser.read();
			ROS_INFO_STREAM("Read: " <<str);
            ROS_INFO_STREAM("Read: " <<alive);//<<result.data);
			//ROS_INFO("Receive : %x %x %x %x", receive[0], receive[1], receive[2], receive[3]);
            read_pub.publish(result);
        }
        loop_rate.sleep();

    }
}
